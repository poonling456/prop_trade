test=getBars("CKCU7 Comdty",barInterval = 60)
test
test=getBars("CKCU7 Comdty",barInterval = 60,startTime = as.Date("2017-01-03"),endTime = as.Date("2017-01-04"))
test=getBars("CKCU7 Comdty",barInterval = 60,startTime = as.POSIXct("2017-01-03"),endTime = as.POSIXct("2017-01-04"))
test
test=getBars("CKCU7 Comdty",barInterval = 60,startTime = as.POSIXct("2017-01-03"),endTime = as.POSIXct("2017-01-07"))
test
test=bdh("CKCU7 Comdty",fields = "PX_LAST",start.date = as.POSIXct("2017-01-03"), end.date = as.POSIXct("2017-01-03"))
test=bdh("CKCU7 Comdty",fields = "PX_LAST",start.date = as.Date("2017-01-03"), end.date = as.Date("2017-01-03"))
test
test=bdh("CKCU7 Comdty",fields = "PX_LAST",start.date = as.Date("2017-01-03"), end.date = as.Date("2017-01-07"))
test
View(kee_size)
#### START!!!!!
chartSeries(to.period(kee_px_vo_ex_opcl,period = 'minute'))
addTA(to.period(ckc_px_vo_ex_opcl,period = 'minute'))
#### START!!!!!
chartSeries(to.period(kee_px_vo_ex_opcl,period = 'minute'),TA='addTA(Cl(to.period(ckc_px_vo_ex_opcl,period = 'minute')))')
#### START!!!!!
chartSeries(to.period(kee_px_vo_ex_opcl,period = 'minute'),TA='addTA(Cl(to.period(ckc_px_vo_ex_opcl,period = "minute")))')
#### START!!!!!
chartSeries(to.period(kee_px_vo_ex_opcl,period = 'minute'),TA='addTA(Cl(to.period(ckc_px_vo_ex_opcl,period = "minute")),on=1)')
#### START!!!!!
chartSeries(to.period(kee_px_vo_ex_opcl,period = 'minute'),TA='addTA(Cl(to.period(ckc_px_vo_ex_opcl,period = "minute")),on=1,col="red")')
head(ckc_px_vo_ex_opcl)
head(kee_px_vo_ex_opcl)
head(sort(ROC(Cl(ckc_px_vo_ex_opcl))))
head()
head(ckc_px_vo_ex_opcl)
head(sort(ROC(Cl(to.period(ckc_px_vo_ex_opcl,'second')))))
`names<-`(as.numeric(to.period(ckc_px_vo_ex_opcl,'second')),time(to.period(ckc_px_vo_ex_opcl,'second')))
head(sort(ROC(Cl(`names<-`(as.numeric(to.period(ckc_px_vo_ex_opcl,'second')),time(to.period(ckc_px_vo_ex_opcl,'second')))))))
ckc_1s=to.period(ckc_px_vo_ex_opcl,'seconds')
View(ckc_1s)
ckc_1s_roc=ROC(Cl(ckc_1s))
View(ckc_1s_roc)
ckc_1s_roc_vector=`names<-`(as.numeric(ckc_1s_roc),time(ckc_1s_roc))
head((ckc_1s_roc_vector))
head((ckc_1s_roc))
head(sort(ckc_1s_roc_vector,decreasing = T\))
head(sort(ckc_1s_roc_vector,decreasing = T\))
head(sort(ckc_1s_roc_vector,decreasing = T))
chartSeries(ckc_1s,subset='2018-02-22/23')
remove(test)
chartSeries(ckc_1s,subset='2018-02-21 20:00:00 /22 09:30:00')
chartSeries(ckc_1s,subset='2018-02-21 20:00:00/2018-02-21 09:30:00')
chartSeries(ckc_1s,subset='2018-02-21 20:00:00/2018-02-22 09:30:00')
chartSeries(ckc_1s,subset='2018-02-19 20:00:00/2018-02-22 09:30:00')
chartSeries(ckc_1s,subset='2018-02-21 20:00:00')
chartSeries(ckc_1s,subset='2018-02-19 20:00:00')
chartSeries(ckc_1s,subset='2018-02-20 20:00:00')
chartSeries(ckc_1s,subset='2018-02-20 20')
chartSeries(ckc_1s,subset='2018-02-19 20')
chartSeries(ckc_1s,subset='2018-02-18 20')
chartSeries(ckc_1s,subset='2018-02-18 21')
chartSeries(ckc_1s,subset='2018-02-22 09')
chartSeries(ckc_1s,subset='2018-02-22 09:00:00/2018-02-22 09:05:00')
kee_1s=to.period(kee_px_vo_ex_opcl,'seconds')
kee_1s_roc=ROC(Cl(kee_1s))
kee_1s_roc_vector=`names<-`(as.numeric(kee_1s_roc),time(kee_1s_roc))
chartSeries(kee_1s,subset='2018-02-22 09:00:00/2018-02-22 09:05:00')
head(sort(ckc_1s_roc_vector,decreasing = T))
nx_time('2018-02-22 09:00:00',-1,time(ckc_1s))
chartSeries(ckc_1s,subset='2018-02-14 14:59:00/2018-02-22 09:01:00')
chartSeries(kee_1s,subset='2018-02-14 14:59:00/2018-02-22 09:01:00')
View(kee_1s_roc_vector[2018-02-22 09:00'])
View(kee_1s_roc_vector['2018-02-22 09:00'])
View(kee_1s_roc['2018-02-22 09:00'])
chartSeries(cumsum(kee_1s_roc['2018-02-22 09:00']))
chartSeries(cumsum(kee_1s_roc['2018-02-14 14:59:00/2018-02-22 09:01:00']))
addTA(cumsum(ckc_1s_roc['2018-02-14 14:59:00/2018-02-22 09:01:00']))
addTA(cumsum(ckc_1s_roc['2018-02-14 14:59:00/2018-02-22 09:01:00']),on=1)
load("C:/Users/Anthony/Desktop/ongoing/cn comdty/new flow/cn comdty.RData")
load("C:/Users/Anthony/Desktop/ongoing/cn comdty/new flow/cn comdty.RData")
# install.packages("candlesticks", repos="http://R-Forge.R-project.org")
library(Rblpapi)
library(quantmod)
library(candlesticks)
library(tseries)
library(ggplot2)
library(reshape2)
library(foreach)
library(doParallel)
library(plyr)
library(lubridate)
dce_daily=to.period(dce_px_vo,'day')
View(dce_daily)
dce_HiCl=HiCl(dce_daily)
View(dce_HiCl)
View(dce_daily)
4247/4209
4247/4185
log(4247/4185)
4254/4209
4247/4198
4247/4210
dce_HiCl=Hi(dce_daily)/(Cl(dce_daily))
dce_HiCl=Hi(dce_daily)/lag(Cl(dce_daily))
4393/4322
dce_HiCl=log(Hi(dce_daily)/lag(Cl(dce_daily)))
max(as.numeric(dce_HiCl))
max(as.numeric(dce_HiCl),na.rm = T)
4120/3949
View(dce_active)
ioe_daily=to.period(ioe_px_vo,'day')
ioe_HiCl=log(Hi(ioe_daily)/lag(Cl(ioe_daily)))
max(as.numeric(ioe_HiCl),na.rm = T)
ioe_HiCl
View(ioe_HiCl)
View(kee_active)
View(ioe_active)
View(ioe_daily)
506/497
510
510.5/497.5
library(Rblpapi)
library(quantmod)
library(candlesticks)
library(tseries)
library(ggplot2)
library(reshape2)
library(foreach)
library(doParallel)
library(plyr)
library(lubridate)
head(cu_px_vo['09:00:00/10:00:00'])
tail(cu_px_vo['09:00:00/10:00:00'])
tail(cu_px_vo['T09:00:00/T10:00:00'])
tail(cu_px_vo['T09:00/T10:00'])
tail(cu_px_vo['T09/T10'])
tail(cu_px_vo['T09/T16'])
head(cu_px_vo['T08/T16'])
head(cu_px_vo['T08/T15'])
rbind(xts(c(1,2),c(as.Date('2017-01-01'),as.Date('2017-01-03'))),xts(c(3,4),c(as.Date('2017-01-02'),as.Date('2017-01-04'))))
dce_morning_daily=to.period(cu_px_vo['T08/T15'],'day')
dce_morning_evening=to.period(cu_px_vo['T16/T07'],'day')
View(dce_morning_daily)
View(dce_morning_evening)
dce_daily_morning=to.period(cu_px_vo['T08/T15'],'day')
dce_daily_evening=to.period(cu_px_vo['T16/T07'],'day')
remove(dce_morning_daily)
remove(dce_morning_evening)
View(dce_daily_morning)
dce_daily=rbind(dce_daily_morning,dce_daily_evening)
View(dce_daily)
dce_HiCl=log(Hi(dce_daily)/lag(Cl(dce_daily)))
View(dce_HiCl)
dce_daily_morning=to.period(dce_px_vo['T08/T15'],'day')
dce_daily_evening=to.period(dce_px_vo['T16/T07'],'day')
dce_daily=rbind(dce_daily_morning,dce_daily_evening)
dce_HiCl=log(Hi(dce_daily)/lag(Cl(dce_daily)))
ioe_daily_morning=to.period(ioe_px_vo['T08/T15'],'day')
#no evening
ioe_daily_evening=to.period(ioe_px_vo['T16/T07'],'day')
ioe_daily=rbind(ioe_daily_morning,ioe_daily_evening)
ioe_HiCl=log(Hi(ioe_daily)/lag(Cl(ioe_daily)))
View(ioe_HiCl)
View(ioe_active)
510/503
View(ioe_daily)
to.period(ioe_px_vo,'hour')['2017-12-15']
name(ioe)
View(ioe)
xts(ioe[[3]]$value,ioe[[3]]$times)['2017-12-15']
to.period(xts(ioe[[3]]$value,ioe[[3]]$times),'hor')['2017-12-15']
to.period(xts(ioe[[3]]$value,ioe[[3]]$times),'hour')['2017-12-15']
ioe[[3]]
View(ioe_active)
to.period(xts(ioe[[3]]$value,ioe[[3]]$times),'hour')['2017-12-15']
to.period(xts(ioe[[3]]$value,ioe[[3]]$times),'hour')['2017-12-15']
536/508
View(ioe)
View(ioe_active)
View(cu_active)
View(dce_active)
540/508
.03*sqrt(24*250)
#dalian ex, 4% trading limit
kee_daily_morning=to.period(kee_px_vo['T08/T15'],'day')
#no evening
kee_daily_evening=to.period(kee_px_vo['T16/T07'],'day')
kee_daily=rbind(kee_daily_morning,kee_daily_evening)
kee_HiCl=log(Hi(kee_daily)/lag(Cl(kee_daily)))
View(kee_HiCl)
View(kee_active)
#dalian ex, 4% trading limit
cu_daily_morning=to.period(cu_px_vo['T08/T15'],'day')
#no evening
cu_daily_evening=to.period(cu_px_vo['T16/T07'],'day')
cu_daily=rbind(cu_daily_morning,cu_daily_evening)
cu_HiCl=log(Hi(cu_daily)/lag(Cl(cu_daily)))
View(dce_daily)
View(dce_HiCl)
View(cu_HiCl)
.032*sqrt(24*250)
# blpConnect() # automatic if option("blpAutoConnect") is TRUE
blpConnect(host = getOption("blpHost", "192.168.91.172"),port = getOption("blpPort", 10194L), default = TRUE)
############download
name=c('DCE',
'RBT',
'CU',
'IOE',
'KEE')
month=toupper(c('f',
'g',
'h',
'j',
'k',
'm',
'n',
'q',
'u',
'v',
'x',
'z'))
year=7:8
symbol=sapply(name, function(x)
{
sapply(year,function(y)
{
sapply(month, function(z)
{
paste(x,z,y," Comdty", sep="")
})
})
})
View(symbol)
# if the x is not in time_object, will repace x with
# the closest element in time_object after x
nx_time=function(x,n=1,time_object=time(security))
{
x=as.POSIXct(x)
time_object=as.POSIXct(time_object)
i= match(x,time_object)
i=mapply(function(x,i)
{
if(is.na(i)) head(which(x<time_object),1)
else i
},x,i)
as.POSIXct(ifelse(i+n<1,
time_object[1],
ifelse((i+1)>length(time_object),
tail(time_object,1),
time_object[i+n])),origin=as.POSIXct( '1970-01-01 08:00:00'))
}
n_laply=function(x,FUN,dimension)
{
arg=paste('x',dimension:1,sep='')
body=paste(sapply(arg,function(arg) paste('function(',arg,') laply(',arg,',',sep = ''))[-1*dimension],collapse = '')
eval(parse(text=paste('laply(x,',
body,
'function(',
arg[dimension],
')',
FUN,
paste(rep(')',dimension),collapse = ''))))
}
ndarray_which=function(arr,FUN)
{
which(arr==FUN(arr),arr.ind = T)
}
golden_cross=function(cross,get_crossed)
{
lag(cross<get_crossed) & cross>get_crossed
}
no_exit_signal=function(entry_signal)
{
xts(rep(F,nrow(entry_signal)),time(entry_signal))
}
#trailing_stop_pct(time_object_signal = time(security),time_sig_n = as.POSIXct('2017-11-20 13:49:57'),time_sig_x = as.POSIXct('9999-12-31'),second_price = to.period(dce_px_vo,period = 'second'))
trailing_stop_pct=function(second_price, time_object_signal, time_sig_n, time_sig_x, threshold=0.995)
{
#assume OHLC input
price_period=second_price[paste(nxd(time_sig_n,1,time_object_signal),time_sig_x,sep = '/')]
second_time=time(price_period)
lo=Lo(price_period)
hi=Hi(price_period)
hwm=cummax(hi)
limit=lag(hwm)*threshold
touch=head(lo[lo<limit],1)
if(length(touch)==0) return(logical())
px=head(Op(price_period)[nxd(time(touch),time_object = second_time)],1)
list(`time`=time(px),`price`=as.numeric(px),`method`='trailing stop')
}
no_stop=function(...)
{
logical()
}
#buggy if both sig_x and sig_n is True
#refrain this
bt_stoploss=function(security, sig_n, sig_x=!sig_n,stoploss, ...)
{
# initialize
remain_n=sig_n
remain_x=sig_x
df=data.frame(`entry time`=as.POSIXct(character()),
`entry price`=numeric(),
`exit time`=as.POSIXct(character()),
`exit price`=numeric(),
`exit method`=character())
time_sig_x=as.POSIXct('1900-01-01')
time_end=tail(time(security),1)
repeat
{
#truncate sig_n before last signal of exit
after_x=paste(time_sig_x,'/',sep = '')
remain_n=remain_n[after_x]
first_sig_n=head(remain_n[remain_n],1)
#no more sig -> break
if(length(first_sig_n)==0) break
#entry next open
time_sig_n=time(first_sig_n)
px_n=Op(security)[nxd(time_sig_n,time_object = time(security))]
#truncate sig_x before signal of entry
after_n=paste(time_sig_n,'/',sep = '')
remain_x=remain_x[after_n]
first_sig_x=head(remain_x[remain_x],1)
#if no more exit signal-> check stop loss
if(length(first_sig_x)==0 || time(first_sig_x)==time_end)
{
#stop loss should return list of time, price and method
#if no stop loss, return NA
exit_sl=stoploss(time_object_signal=time(security),
time_sig_n = time_sig_n,
time_sig_x = time_end,
...)
if(length(exit_sl)==0) break
#exit by stop loss if there is stop loss
time_x=exit_sl$time
px_x=exit_sl$price
method=exit_sl$method
}
# if there is exit signal
else
{
time_sig_x=time(first_sig_x)
exit_sl=stoploss(time_object_signal=time(security),
time_sig_n = time_sig_n,
time_sig_x = time_sig_x,
...)
#case1: no stop loss
if(length(exit_sl)==0)
{
time_x=nx_time(time_sig_x,time_object=time(security))
px_x=Op(security)[time_x]
method='signal'
}
#case2: signal comes first
else if(exit_sl$time>time_sig_x)
{
time_x=nx_time(time_sig_x,time_object=time(security))
px_x=Op(security)[time_x]
method='signal'
}
#case3: stop loss comes first
else
{
time_x=exit_sl$time
px_x=exit_sl$price
method=exit_sl$method
}
}
time_sig_x=time_x
temp=cbind.data.frame(`entry time`=time(px_n),
`entry price`=as.numeric(px_n),
`exit time`=time_x,
`exit price`=as.numeric(px_x),
`exit method`=method)
df=rbind(df,temp)
}
df
}
##### price is a price series with bar interval that you want(must be smaller than or equal to that used to generate signal)
performance=function(ledger, price, bid_ask_spread=0,commission=0,commission_type='*')
{
if(nrow(ledger)>0)
{
ledger$`entry price`=ledger$`entry price`+bid_ask_spread
ledger$`exit price`=ledger$`exit price`-bid_ask_spread
if(commission_type=='*')
{
ledger$`entry price`=ledger$`entry price`*(1+commission)
ledger$`exit price`=ledger$`exit price`*(1-commission)
}
else if(commission_type=='+')
{
ledger$`entry price`=ledger$`entry price`+commission
ledger$`exit price`=ledger$`exit price`-commission
}
ret_bar=xts(rep(0,nrow(price)),time(price))
ret_bar[ledger$`entry time`]=log(Cl(price[ledger$`entry time`])/ledger$`entry price`)
hold_period=paste(nx_time(ledger$`entry time`,1,time(price)),'/',nx_time(ledger$`exit time`,-1,time(price)),sep = '')
ret_bar[hold_period]=ROC(Cl(price))[hold_period]
ret_bar[as.character(nx_time(ledger$`exit time`,0,time(price)))]=log(ledger$`exit price`/Cl(price[as.character(nx_time(ledger$`exit time`,-1,time(price)))]))
mdd=maxdrawdown(cumsum(ret_bar))
list(`ledger`=ledger,
`bar return`=ret_bar,
`mean bar return`=mean(ret_bar),
`trade`=nrow(ledger),
`win rate`=length(which(ledger$`exit price`>ledger$`entry price`))/nrow(ledger),
`up day`=length(which(ret_bar>0))/length(ret_bar),
`down day`=length(which(ret_bar<0))/length(ret_bar),
`holding period`=length(ret_bar[ret_bar!=0])/nrow(ledger),
`sd`=sqrt(var(ret_bar)),
`sr`=mean(ret_bar)/sqrt(var(ret_bar)),
`mdd`=mdd$maxdrawdown,
`mdd period`=head(mdd$to,1)-head(mdd$from,1))
}
else
{
list(`ledger`=NA,
`bar return`=NA,
`mean bar return`=NA,
`trade`=NA,
`win rate`=NA,
`up day`=NA,
`down day`=NA,
`holding period`=NA,
`sd`=NA,
`sr`=NA,
`mdd`=NA,
`mdd period`=head(mdd$to,1)-head(mdd$from,1))
}
}
########working until here, seems correct
#
# ####testing the function####
#
# macd_hist=macd$macd - macd$signal
#
# signal_n=seriesIncr(macd_hist) & macd_hist<0
# signal_x=seriesDecr(macd_hist)
#
# trade3=bt_stoploss(security = security ,
#                    sig_n = signal_n ,
#                    sig_x = signal_x,
#                    stoploss = trailing_stop_pct,
#                    second_price=to.period(dce_px_vo,period = 'seconds'))
#
# metrics3=performance(trade3,price = dce_10m,bid_ask_spread = 1,commission = 0.000165,commission_type = '*')
# metrics4=performance(trade3,price = dce_10m)
#
# ####testing the function####
# install.packages("Rblpapi")
# install.packages("quantmod")
# install.packages("candlesticks", repos="http://R-Forge.R-project.org")
library(Rblpapi)
library(quantmod)
library(candlesticks)
library(tseries)
library(ggplot2)
library(reshape2)
library(foreach)
library(doParallel)
library(plyr)
library(lubridate)
# install.packages("Rblpapi")
# install.packages("quantmod")
# install.packages("candlesticks", repos="http://R-Forge.R-project.org")
library(Rblpapi)
library(quantmod)
library(candlesticks)
library(tseries)
library(ggplot2)
library(reshape2)
library(foreach)
library(doParallel)
library(plyr)
library(lubridate)
chartSeries(to.period(dce_px_vo_ex_opcl,'hour')
)
chartSeries(to.period(cu_px_vo_ex_opcl,'hour'))
chartSeries(to.period(kee_px_vo_ex_opcl,'hour'))
chartSeries(to.period(ioe_px_vo_ex_opcl,'hour'))
chartSeries(to.period(rbt_px_vo_ex_opcl,'hour'))
chartSeries(Vo(to.period(cu_px_vo_ex_opcl,'minute')))
date(time(to.period(cu_px_vo_ex_opcl,'minute'))
)
unique(date(time(to.period(cu_px_vo_ex_opcl,'minute'))))
chartSeries(Vo(to.period(cu_px_vo_ex_opcl,'minute')),
subset = unique(date(time(to.period(cu_px_vo_ex_opcl,'minute')))))
unique(date(time(to.period(cu_px_vo_ex_opcl,'minute'))))
sapply(unique(date(time(to.period(cu_px_vo_ex_opcl,'minute')))),
function(x)
{
chartSeries(Vo(to.period(cu_px_vo_ex_opcl,'minute')),
subset = x)
})
sapply(unique(date(time(to.period(cu_px_vo_ex_opcl,'minute')))),
function(x)
{
print(x)
})
sapply(as.character(unique(date(time(to.period(cu_px_vo_ex_opcl,'minute'))))),
function(x)
{
print(x)
})
sapply(as.character(unique(date(time(to.period(cu_px_vo_ex_opcl,'minute'))))),
function(x)
{
chartSeries(Vo(to.period(cu_px_vo_ex_opcl,'minute')),
subset = x)
})
as.character(unique(date(time(to.period(cu_px_vo_ex_opcl,'minute')))))
time(to.period(cu_px_vo_ex_opcl,'minute'))
cu_open_vo=Vo(to.period(cu_px_vo_ex_opcl,'minute')['T09'])
View(cu_open_vo)
cu_open_vo=Vo(to.period(cu_px_vo_ex_opcl,'minute')['T09/09'])
cu_open_vo=Vo(to.period(cu_px_vo_ex_opcl,'minute')['T09/10'])
cu_open_vo=Vo(to.period(cu_px_vo_ex_opcl,'minute')['T09/11'])
to.period(cu_px_vo_ex_opcl,'minute')
