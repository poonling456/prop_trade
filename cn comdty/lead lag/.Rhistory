list(`ledger`=NA,
`bar return`=NA,
`mean bar return`=NA,
`trade`=NA,
`win rate`=NA,
`up day`=NA,
`down day`=NA,
`holding period`=NA,
`sd`=NA,
`sr`=NA,
`mdd`=NA,
`mdd period`=NA)
}
}
stopCluster(cl)
proc.time()-start_timer
ret_mean=laply(rpt, function(x) laply(x, function(y) laply(y, function(z) laply(z, function(w) w$`mean bar return`))))
a=n_laply(rpt,'x1$sr',4)
max(a)
max(a)*sqrt(5*6*250)
which(a==max(a),arr.ind = T)
iter4[18]
iter1[11]
iter2[10]
iter3[7]
count=n_laply(rpt,FUN = 'x1$count',4)
remove(arg)
remove(args)
remove(arg)
remove(body)
count=n_laply(rpt,'x1$count',4)
View(rpt)
count=n_laply(rpt,'x1$trade',4)
count[11,10,7,18]
ret_mean=n_laply(rpt,FUN = 'x1$`mean bar return`',4)
count=n_laply(rpt,FUN = 'x1$count',4)
ret_mean=n_laply(rpt,FUN = 'x1$`mean bar return`',4)
count=n_laply(rpt,FUN = 'x1$trade',4)
win_rate=n_laply(rpt, 'x1$`win rate`',4)
up_day=n_laply(rpt, 'z$`up day`')
up_day=n_laply(rpt, 'z$`up day`',4)
up_day=n_laply(rpt, 'x1$`up day`',4)
dn_day=n_laply(rpt, 'x1$`down day`',4)
dur_mean=laply(rpt, 'x1$`holding period`',4)
dur_mean=n_laply(rpt, 'x1$`holding period`',4)
std=n_laply(rpt, 'x1$sd',4)
sr=n_laply(rpt, 'x1$sr',4)
mdd_pct=laply(rpt, 'x1$mdd',4)
mdd_pct=n_laply(rpt, 'x1$mdd',4)
mdd_dur=n_laply(rpt, 'x1$`mdd period`',4)
sr[11,10,7,18]
win_rate[11,10,7,18]
dur_mean[11,10,7,18]
df[11,10,7,18]
perf[11,10,7,18]
perf[[11]][[10]][[7]][[18]]$df
perf[[11]][[10]][[7]][[18]]$ledger
perf[[11]][[10]][[7]][[18]]
perf[[11]][[10]][[7]]
remove(a)
remove(rpt2)
iter4
iter1
length(iter1)
length(iter2)
length(iter3)
length(iter4)
ret_mean=n_laply(rpt,FUN = 'x1$`mean bar return`',4)
count=n_laply(rpt,FUN = 'x1$trade',4)
win_rate=n_laply(rpt, 'x1$`win rate`',4)
up_day=n_laply(rpt, 'x1$`up day`',4)
dn_day=n_laply(rpt, 'x1$`down day`',4)
dur_mean=n_laply(rpt, 'x1$`holding period`',4)
std=n_laply(rpt, 'x1$sd',4)
sr=n_laply(rpt, 'x1$sr',4)
mdd_pct=n_laply(rpt, 'x1$mdd',4)
mdd_dur=n_laply(rpt, 'x1$`mdd period`',4)
View(rpt)
View(rpt)
library(Rblpapi)
library(quantmod)
blpConnect(host = getOption("blpHost", "192.168.91.172"),port = getOption("blpPort", 10194L), default = TRUE)
HSI_tick=getMultipleTicks('HSI Index', eventType = c("TRADE"), startTime = as.POSIXct('2018-06-11'),tz = Sys.getenv("TZ", unset = "Asia/Taipei"))
View(HSI_tick)
HI1_tick=getMultipleTicks('HI1 COMB Index', eventType = c("TRADE"), startTime = as.POSIXct('2018-06-11'),tz = Sys.getenv("TZ", unset = "Asia/Taipei"))
View(HI1_tick)
name=c('CKC')
month=toupper(c('f',
'g',
'h',
'j',
'k',
'm',
'n',
'q',
'u',
'v',
'x',
'z'))
year=7:8
symbol=sapply(name, function(x)
{
sapply(year,function(y)
{
sapply(month, function(z)
{
paste(x,z,y," Comdty", sep="")
})
})
})
symbol=symbol[-(1:4),]
library(Rblpapi)
library(quantmod)
library(candlesticks)
library(tseries)
library(ggplot2)
library(reshape2)
library(foreach)
library(doParallel)
library(plyr)
library(lubridate)
blpConnect(host = getOption("blpHost", "192.168.91.172"),port = getOption("blpPort", 10194L), default = TRUE)
###########CKC###########
ckc_vo=lapply(symbol[,'CKC'],
function(x)
{
bdh(x,c("VOLUME"),start.date = as.Date("2017-01-01", format="%Y-%m-%d") )
})
ckc_vo=do.call(cbind,lapply(ckc_vo, function(x)
{
date=x$date
vo=x$VOLUME
xts(vo,date)
}))
ckc_vo_max=apply(ckc_vo,1,which.max)
ckc_changepoint=rle(ckc_vo_max)
ckc_active=cbind.data.frame(symbol[ckc_changepoint[[2]][-1],1],
as.Date(names(ckc_changepoint[[1]])[-length(ckc_changepoint[[1]])]),
as.Date(names(ckc_changepoint[[2]])[-1]))
symbol[,'CKC']
###########CKC###########
ckc_vo=lapply(symbol,
function(x)
{
bdh(x,c("VOLUME"),start.date = as.Date("2017-01-01", format="%Y-%m-%d") )
})
View(ckc_vo)
ckc_vo[[5]][["date"]]
ckc_vo[[5]]
ckc_vo[[18]]
ckc_vo=do.call(cbind,lapply(ckc_vo, function(x)
{
date=x$date
vo=x$VOLUME
xts(vo,date)
}))
View(ckc_vo)
ckc_vo_max=apply(ckc_vo,1,which.max)
ckc_changepoint=rle(ckc_vo_max)
ckc_active=cbind.data.frame(symbol[ckc_changepoint[[2]][-1],1],
as.Date(names(ckc_changepoint[[1]])[-length(ckc_changepoint[[1]])]),
as.Date(names(ckc_changepoint[[2]])[-1]))
ckc_active=cbind.data.frame(symbol[ckc_changepoint[[2]][-1]],
as.Date(names(ckc_changepoint[[1]])[-length(ckc_changepoint[[1]])]),
as.Date(names(ckc_changepoint[[2]])[-1]))
View(ckc_active)
ckc=apply(ckc_active,1,function(x)
{
getMultipleTicks(as.character(x[1]), eventType = c("TRADE"), startTime = as.Date(x[2]),endTime = as.Date(x[3]),tz = Sys.getenv("TZ", unset = "Asia/Taipei"))
})
####clean
#the old version of nx_time() in function, just for this script
nxd=function(x,n=1,time_object=time(security))
{
x=as.POSIXct(x)
time_object=as.POSIXct(time_object)
i= match(x,time_object)
as.POSIXct(ifelse(i+n<1,
time_object[1],
ifelse((i+1)>length(time_object),
tail(time_object,1),
time_object[i+n])),origin=as.POSIXct( '1970-01-01 08:00:00'))
}
#extract time, size, value from different active contract, and then concatenate
ckc_time=sapply(ckc,function(x){x$time})
ckc_size=sapply(ckc,function(x){x$size})
ckc_value=sapply(ckc,function(x){x$value})
#calculate the gap between one active contract to the next active contract
ckc_diff=cumsum(sapply(2:length(ckc_value), function(x)
{
gap=head(ckc_value[[x]],1)-tail(ckc_value[[x-1]],1)
if(length(gap)==0) 0
else gap
}))
#add the gap to or subtract the gap from the first active contract
ckc_value_adj=append(ckc_value[1],sapply(2:length(ckc_value), function(x)
{
ckc_value[[x]]-ckc_diff[x-1]
}))
#format the data to xts
ckc_px_vo=do.call(rbind,mapply(function(x,y,z){xts(cbind(x,y),z)},ckc_value_adj,ckc_size,ckc_time))
names(ckc_px_vo)=c('px','Volume')
#push the market open 1 tick later ,push the market close 1 tick earlier
#so that open and close would not be represented by 1 bar
#representing open and close (1 tick) by 1 bar (1 second, 1 minute, or even 1 hour!) would give them too much importance
ckc_time_ex_opcl=as.POSIXct(sapply(time(ckc_px_vo),function(x)
{
hour=as.POSIXlt(x)$hour
if(hour==8) nxd(x,1,time(ckc_px_vo))
else if(hour==15) nxd(x,-1,time(ckc_px_vo))
else x
}),origin=as.POSIXct( '1970-01-01 08:00:00'))
#format the data to xts
ckc_px_vo_ex_opcl=xts(ckc_px_vo,ckc_time_ex_opcl)
View(ckc_px_vo_ex_opcl)
ckc_time_ex_opcl
View(ckc_active)
View(ckc_changepoint)
View(ckc_vo)
ckc_vo_max
ckc_changepoint[[2]][-1]]
ckc_changepoint[[2]][-1]
View(ckc_active)
View(ckc_vo)
ckc_vo[,7]
###########CKC###########
ckc_vo=lapply(symbol,
function(x)
{
bdh(x,c("VOLUME"),start.date = as.Date("2017-01-01", format="%Y-%m-%d") )
})
names(ckc_vo)
names(ckc_vo)=symbol
ckc_vo[7]
ckc_vo[6]
ckc_vo[7]
ckc_vo[8]
ckc_vo_matrix=do.call(cbind,lapply(ckc_vo, function(x)
{
date=x$date
vo=x$VOLUME
xts(vo,date)
}))
View(ckc_vo_matrix)
ckc_vo_max=apply(ckc_vo_matrix,1,which.max)
ckc_vo_max
ckc_changepoint=rle(ckc_vo_max)
symbol
names(ckc_vo)
names(ckc_vo_matrix)
ckc_vo_max=apply(ckc_vo_matrix,1,which.max)
ckc_changepoint=rle(ckc_vo_max)
ckc_active=cbind.data.frame(names(ckc_vo_matrix),
as.Date(names(ckc_changepoint[[1]])[-length(ckc_changepoint[[1]])]),
as.Date(names(ckc_changepoint[[2]])[-1]))
View(ckc_active)
###########CKC###########
ckc_vo=lapply(symbol,
function(x)
{
`names<-`(bdh(x,c("VOLUME"),start.date = as.Date("2017-01-01", format="%Y-%m-%d") ),x)
})
ckc_vo
names(ckc_vo_matrix)names(ckc_vo)
names(ckc_vo)
names(ckc_vo[[1]])
ckc_vo_matrix=do.call(cbind,lapply(ckc_vo, function(x)
{
name=names(x)[1]
date=x$date
vo=x$VOLUME
xts(vo,date)
}))
###########CKC###########
ckc_vo=lapply(symbol,
function(x)
{
bdh(x,c("VOLUME"),start.date = as.Date("2017-01-01", format="%Y-%m-%d") )
})
View(ckc_vo)
ckc_vo[[4]]
ckc_vo[[5]]
ckc_vo[[6]]
names(ckc_vo)=symbol
ckc_vo_matrix=do.call(cbind,lapply(ckc_vo, function(x)
{
date=x$date
vo=x$VOLUME
xts(vo,date)
}))
View(ckc_vo_matrix)
names(ckc_vo_matrix)
symbol
dim(ckc_vo_matrix)
sapply(ckc_vo,length)
sapply(ckc_vo,nrow)
no_data=sapply(ckc_vo,nrow)==0
no_data=length(ckc_vo)[sapply(ckc_vo,nrow)==0]
no_data=(1:length(ckc_vo))[sapply(ckc_vo,nrow)==0]
ckc_vo_max=apply(ckc_vo_matrix,1,which.max)
ckc_changepoint=rle(ckc_vo_max)
View(ckc_changepoint)
ckc_changepoint
ckc_changepoint[[2]]
symbol[ckc_changepoint[[2]]]
symbol[-1*no_data][ckc_changepoint[[2]]]
names(ckc_changepoint[[1]])
c('',names(ckc_changepoint[[1]]))
c('',names(ckc_changepoint[[1]])[-length(ckc_changepoint[[1]])])
paste(c('',names(ckc_changepoint[[1]])[-length(ckc_changepoint[[1]])]),names(ckc_changepoint[[2]]),sep='/')
paste(c('1900',names(ckc_changepoint[[1]])[-length(ckc_changepoint[[1]])]),names(ckc_changepoint[[2]]),sep='/')
data_period=paste(c('1900',names(ckc_changepoint[[1]])[-length(ckc_changepoint[[1]])]),names(ckc_changepoint[[2]]),sep='/')
start.date=as.POSIXct(c('1900',names(ckc_changepoint[[1]])[-length(ckc_changepoint[[1]])])
names(ckc_changepoint[[2]]),sep='/')
as.POSIXct(c('1900',names(ckc_changepoint[[1]])[-length(ckc_changepoint[[1]])]))
as.POSIXct(c('1900-01-01',names(ckc_changepoint[[1]])[-length(ckc_changepoint[[1]])]))
head(ckc_vo)
head(ckc_vo[[1]],1)
head(time(ckc_vo_matrix))
head(time(ckc_vo_matrix),1)
start.date=as.POSIXct(c(head(time(ckc_vo_matrix),1),names(ckc_changepoint[[1]])[-length(ckc_changepoint[[1]])]))
as.POSIXct(c(head(time(ckc_vo_matrix),1))
)
c(head(time(ckc_vo_matrix),1),names(ckc_changepoint[[1]])[-length(ckc_changepoint[[1]])])
names(ckc_changepoint[[1]])[-length(ckc_changepoint[[1]])]
type(head(time(ckc_vo_matrix),1))
class(head(time(ckc_vo_matrix),1))
start.date=c(head(time(ckc_vo_matrix),1),as.Date(names(ckc_changepoint[[1]])[-length(ckc_changepoint[[1]])])))
start.date=c(head(time(ckc_vo_matrix),1),as.Date(names(ckc_changepoint[[1]])[-length(ckc_changepoint[[1]])]))\
start.date=c(head(time(ckc_vo_matrix),1),as.Date(names(ckc_changepoint[[1]])[-length(ckc_changepoint[[1]])]))
end.date=names(ckc_changepoint[[2]])
start.date
end.date
symbol[no_data]
symbol[-no_data]
symbol[-no_data][ckc_changepoint$values]
bbg_symbol=symbol[-no_data][ckc_changepoint$values]
end.date
start.date
start.date=c(head(time(ckc_vo_matrix),1),as.POSIXct(names(ckc_changepoint[[1]])[-length(ckc_changepoint[[1]])]))
start.date
names(ckc_changepoint[[1]]
)
as.POSIXct(names(ckc_changepoint[[1]]))
as.POSIXct("2017-08-03")
as.POSIXct(names(ckc_changepoint[[1]])[-length(ckc_changepoint[[1]])])
start.date=c(head(time(ckc_vo_matrix),1),as.POSIXct(names(ckc_changepoint[[1]])[-length(ckc_changepoint[[1]])]))
start.date
start.date=c(head(time(ckc_vo_matrix),1),as.Date(names(ckc_changepoint[[1]])[-length(ckc_changepoint[[1]])]))
start.date
as.POSIXct(start.date)
end.date=as.Date(names(ckc_changepoint[[2]]))
end.date
start.date
bbg_symbol=symbol[-no_data][ckc_changepoint$values]
bbg_symbol
ckc=mapply(function(x,y,z)
{
getMultipleTicks(x, eventType = c("TRADE"), startTime = y,endTime = z,tz = Sys.getenv("TZ", unset = "Asia/Taipei"))
},
bbg_symbol,
start.date,
end.date)
#the old version of nx_time() in function, just for this script
nxd=function(x,n=1,time_object=time(security))
{
x=as.POSIXct(x)
time_object=as.POSIXct(time_object)
i= match(x,time_object)
as.POSIXct(ifelse(i+n<1,
time_object[1],
ifelse((i+1)>length(time_object),
tail(time_object,1),
time_object[i+n])),origin=as.POSIXct( '1970-01-01 08:00:00'))
}
#extract time, size, value from different active contract, and then concatenate
ckc_time=sapply(ckc,function(x){x$time})
ckc_size=sapply(ckc,function(x){x$size})
ckc_value=sapply(ckc,function(x){x$value})
#calculate the gap between one active contract to the next active contract
ckc_diff=cumsum(sapply(2:length(ckc_value), function(x)
{
gap=head(ckc_value[[x]],1)-tail(ckc_value[[x-1]],1)
if(length(gap)==0) 0
else gap
}))
#add the gap to or subtract the gap from the first active contract
ckc_value_adj=append(ckc_value[1],sapply(2:length(ckc_value), function(x)
{
ckc_value[[x]]-ckc_diff[x-1]
}))
#format the data to xts
ckc_px_vo=do.call(rbind,mapply(function(x,y,z){xts(cbind(x,y),z)},ckc_value_adj,ckc_size,ckc_time))
names(ckc_px_vo)=c('px','Volume')
#push the market open 1 tick later ,push the market close 1 tick earlier
#so that open and close would not be represented by 1 bar
#representing open and close (1 tick) by 1 bar (1 second, 1 minute, or even 1 hour!) would give them too much importance
ckc_time_ex_opcl=as.POSIXct(sapply(time(ckc_px_vo),function(x)
{
hour=as.POSIXlt(x)$hour
if(hour==8) nxd(x,1,time(ckc_px_vo))
else if(hour==15) nxd(x,-1,time(ckc_px_vo))
else x
}),origin=as.POSIXct( '1970-01-01 08:00:00'))
#format the data to xts
ckc_px_vo_ex_opcl=xts(ckc_px_vo,ckc_time_ex_opcl)
View(ckc_px_vo_ex_opcl)
View(ckc)
ckc=mapply(function(x,y,z)
{
getMultipleTicks(x, eventType = c("TRADE"), startTime = y,endTime = z,tz = Sys.getenv("TZ", unset = "Asia/Taipei"))
},
bbg_symbol,
start.date,
end.date,
SIMPLIFY = F)
bdp('CKCU7','PX_LAST')
bdh('CKCU7','PX_LAST')
View(ckc_active)
start.date
bbg_symbol
View(ckc_vo_matrix)
end.date
getMultipleTicks("CKCU7 Comdty",'TRADE',"2017-01-03","2017-01-04")
getMultipleTicks("CKCU7 Comdty",'TRADE',as.Date("2017-01-03"),as.Date("2017-01-04"))
bdh("CKCU7 Comdty",'TRADE',as.Date("2017-01-03"),as.Date("2017-01-04"))
bdh("CKCU7 Comdty",'PX_LAST',as.Date("2017-01-03"),as.Date("2017-01-04"))
View(ckc)
#the old version of nx_time() in function, just for this script
nxd=function(x,n=1,time_object=time(security))
{
x=as.POSIXct(x)
time_object=as.POSIXct(time_object)
i= match(x,time_object)
as.POSIXct(ifelse(i+n<1,
time_object[1],
ifelse((i+1)>length(time_object),
tail(time_object,1),
time_object[i+n])),origin=as.POSIXct( '1970-01-01 08:00:00'))
}
#extract time, size, value from different active contract, and then concatenate
ckc_time=sapply(ckc,function(x){x$time})
ckc_size=sapply(ckc,function(x){x$size})
ckc_value=sapply(ckc,function(x){x$value})
#calculate the gap between one active contract to the next active contract
ckc_diff=cumsum(sapply(2:length(ckc_value), function(x)
{
gap=head(ckc_value[[x]],1)-tail(ckc_value[[x-1]],1)
if(length(gap)==0) 0
else gap
}))
#add the gap to or subtract the gap from the first active contract
ckc_value_adj=append(ckc_value[1],sapply(2:length(ckc_value), function(x)
{
ckc_value[[x]]-ckc_diff[x-1]
}))
#format the data to xts
ckc_px_vo=do.call(rbind,mapply(function(x,y,z){xts(cbind(x,y),z)},ckc_value_adj,ckc_size,ckc_time))
names(ckc_px_vo)=c('px','Volume')
#push the market open 1 tick later ,push the market close 1 tick earlier
#so that open and close would not be represented by 1 bar
#representing open and close (1 tick) by 1 bar (1 second, 1 minute, or even 1 hour!) would give them too much importance
ckc_time_ex_opcl=as.POSIXct(sapply(time(ckc_px_vo),function(x)
{
hour=as.POSIXlt(x)$hour
if(hour==8) nxd(x,1,time(ckc_px_vo))
else if(hour==15) nxd(x,-1,time(ckc_px_vo))
else x
}),origin=as.POSIXct( '1970-01-01 08:00:00'))
#format the data to xts
ckc_px_vo_ex_opcl=xts(ckc_px_vo,ckc_time_ex_opcl)
View(ckc_px_vo_ex_opcl)
View(head(ckc_px_vo_ex_opcl))
View(head(ckc_px_vo_ex_opcl),100)
View(head(ckc_px_vo_ex_opcl,100))
View(to.period(ckc_px_vo_ex_opcl,'minute'))
save.image("C:/Users/Anthony/Desktop/ongoing/cn comdty/lead lag 焦煤焦炭/ckc.RData")
save.image("C:/Users/Anthony/Desktop/ongoing/cn comdty/lead lag 焦煤焦炭/ckc data.RData")
setwd("C:/Users/Anthony/Desktop/ongoing/cn comdty/lead lag 焦煤焦炭")
getwd()
save.image("C:/Users/Anthony/Desktop/ongoing/cn comdty/lead lag 焦煤焦炭/data.RData")
save.image("C:/Users/Anthony/Desktop/ongoing/cn comdty/lead lag.RData")
load("C:/Users/Anthony/Desktop/ongoing/cn comdty/new flow/cn comdty.RData")
load("C:/Users/Anthony/Desktop/ongoing/cn comdty/new flow/cn comdty.RData")
remove(cu)
remove(cu_active)
remove(cu_changepoint)
remove(cu_vo)
remove(cu_px_vo)
remove(cu_diff)
remove(cu_px_vo_ex_opcl)
remove(cu_size)
remove(cu_time)
remove(cu_time_ex_opcl)
remove(cu_value)
remove(cu_value_adj)
remove(cu_vo_max)
remove(dce)
remove(dce_active)
remove(dce_break)
remove(dce_changepoint)
remove(dce_diff)
remove(dce_px_vo)
remove(dce_px_vo_ex_opcl)
remove(dce_size)
remove(dce_time)
remove(dce_time_ex_opcl)
remove(dce_value)
remove(dce_value_adj)
remove(dce_vo)
remove(dce_vo_max)
save.image("C:/Users/Anthony/Desktop/ongoing/cn comdty/lead lag.RData")
