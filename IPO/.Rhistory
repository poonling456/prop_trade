time_x=exit_sl$time
px_x=exit_sl$price
method=exit_sl$method
}
# if there is exit signal
else
{
time_sig_x=time(first_sig_x)
exit_sl=stoploss(time_object_signal=time(security),
time_sig_n = time_sig_n,
time_sig_x = time_sig_x,
...)
#case1: no stop loss
if(length(exit_sl)==0)
{
time_x=nx_time(time_sig_x,time_object=time(security))
px_x=Op(security)[time_x]
method='signal'
}
#case2: signal comes first
else if(exit_sl$time>time_sig_x)
{
time_x=nx_time(time_sig_x,time_object=time(security))
px_x=Op(security)[time_x]
method='signal'
}
#case3: stop loss comes first
else
{
time_x=exit_sl$time
px_x=exit_sl$price
method=exit_sl$method
}
}
temp=cbind.data.frame(`entry time`=time(px_n),
`entry price`=as.numeric(px_n),
`exit time`=time_x,
`exit price`=as.numeric(px_x),
`exit method`=method)
df=rbind(df,temp)
}
df
}
trade3=bt_stoploss(security = security ,
sig_n = signal_n ,
sig_x = signal_x,
stoploss = trailing_stop_pct,
second_price=to.period(dce_px_vo,period = 'seconds'))
trade3=bt_stoploss(security = security ,
sig_n = signal_n ,
sig_x = signal_x,
stoploss = trailing_stop_pct,
second_price=to.period(dce_px_vo,period = 'seconds'))
# install.packages("Rblpapi")
# install.packages("quantmod")
# install.packages("candlesticks", repos="http://R-Forge.R-project.org")
library(Rblpapi)
library(quantmod)
library(candlesticks)
library(tseries)
library(ggplot2)
library(reshape2)
library(foreach)
library(doParallel)
library(plyr)
library(lubridate)
cu_open_vo=Vo(to.period(cu_px_vo_ex_opcl,'minute')['T09:00/T09:01'])
View(cu_open_vo)
cu_open_vo=Vo(to.period(cu_px_vo_ex_opcl,'minute')['T09:00'])
cu_open_vo=Vo(to.period(cu_px_vo_ex_opcl,'minute')['T09:00/T09:00'])
View(cu_open_vo)
cu_open_vo=Vo(to.period(cu_px_vo_ex_opcl,'minute')['T09:00:00/T09:00:59'])
View(cu_open_vo)
chartSeries(to.period(cu_px_vo_ex_opcl,'day'))
chartSeries(to.period(cu_px_vo_ex_opcl,'day'),TA='addTA(cu_open_vo)')
nrow(to.period(cu_px_vo_ex_opcl,'day'))
nrow(cu_open_vo)
to.period(cu_px_vo_ex_opcl,'minute',30\)
View(to.period(cu_px_vo_ex_opcl,'minute',30))
cu_open_vo=Vo(to.period(cu_px_vo_ex_opcl,'minute')['T08:00:00/T09:00:59'])
View(cu_open_vo)
date(time(cu_open_vo))
as.character(unique(date(time(to.period(cu_px_vo_ex_opcl,'minute')))))
sapply(as.character(unique(date(time(to.period(cu_px_vo_ex_opcl,'minute'))))),
function(x)
{
head(to.period(cu_px_vo_ex_opcl,'minute')['T08/T10'],1)
})
hi=to.period(cu_px_vo_ex_opcl,'minute')
sapply(as.character(unique(date(time(hi)))),
function(x)
{
print(head(hi['T08/T10'],1))
})
hi=to.period(cu_px_vo_ex_opcl,'minute')
sapply(as.character(unique(date(time(hi)))),
function(x)
{
print(head(hi[x]['T08/T10'],1))
})
hi=to.period(cu_px_vo_ex_opcl,'minute')
sapply(as.character(unique(date(time(hi)))),
function(x)
{
print(head(hi[x],1))
})
View(sapply(as.character(unique(date(time(hi)))),
function(x)
{
print(head(hi[x],1))
}))
cu_open_vo=Vo(to.period(cu_px_vo_ex_opcl,'minute')['T08:00:00/T09:00:59'])
time(cu_open_vo)
View(time(cu_open_vo))
View(as.character(unique(date(time(to.period(cu_px_vo_ex_opcl,'minute'))))))
View(head(to.period(cu_px_vo_ex_opcl,'minute')['2017-10-10'])
)
View(head(to.period(cu_px_vo_ex_opcl,'minute')['2017-10-10 08/']))
View(to.period(cu_px_vo_ex_opcl,'minute')['2017-10-10'])
as.character(unique(date(time(to.period(cu_px_vo_ex_opcl,'minute')))))
day_session='T08/T15'
night_session='T16/T07'
View(to.period(cu_px_vo_ex_opcl[night_session],'minute'))
View(Vo(to.period(cu_px_vo_ex_opcl,'minute')['T20:00:00/T20:59:59']))
View(Vo(to.period(cu_px_vo_ex_opcl,'minute')['T20:00:00/T20:59:59']))
View(to.period(cu_px_vo_ex_opcl[night_session],'minute'))
cu_time_ex_opcl=as.POSIXct(sapply(time(cu_px_vo),function(x)
{
hour=as.POSIXlt(x)$hour
if(hour==8 || hour==20) nxd(x,1,time(cu_px_vo))
else if(hour==15) nxd(x,-1,time(cu_px_vo))
else x
}),origin=as.POSIXct( '1970-01-01 08:00:00'))
xts(c(1,1,1),c(as.POSIXct('2017-01-01 09:00:00'),as.POSIXct('2017-01-01 09:00:00')))
xts(c(1,1,1),c(as.POSIXct('2017-01-01 09:00:00'),as.POSIXct('2017-01-01 09:00:00'),as.POSIXct('2017-01-01 09:00:00')))
time(cu_px_vo)[T09]
time(cu_px_vo)['T09']
time(cu_px_vo)['T09/T09']
time(cu_px_vo)['T08:00:00/T08:59:59']
time(cu_px_vo['T08:00:00/T08:59:59'])
time(cu_px_vo['T08:00:00/T09:00:00'])
time(cu_px_vo['T08:00:00/T09:01:00'])
time(cu_px_vo['T08:00:00/T09:00:01'])
cu_px_vo["2017-10-12 09:00:00']
cu_px_vo['2017-10-12 09:00:00']
cu_px_vo['2017-10-12 09:01:00']
as.POSIXlt(time(cu_px_vo))$hour==8
test=cu_px_vo
test[as.POSIXlt(time(cu_px_vo))$hour==8]='hi'
View(head(test,1000))
View(cu_time)
test=cu_time
lapply(cu_time,function(x)
{
x[as.POSIXlt(x)==8]='hi'
})
test=cu_time
lapply(cu_time,function(x)
{
x[as.POSIXlt(x)==8]=as.POSIXct('1999-01-01')
})
test=cu_time
hi=lapply(cu_time,function(x)
{
x[as.POSIXlt(x)==8]=as.POSIXct('1999-01-01')
})
View(hi)
as.POSIXlt(cu_time[[1]])
as.POSIXlt(cu_time[[5]])
as.POSIXlt(cu_time[[10]])
test=cu_time
hi=lapply(cu_time,function(x)
{
x[as.POSIXlt(x)$hour==8]=as.POSIXct('1999-01-01')
})
View(hi)
test=cu_time
hi=lapply(cu_time,function(x)
{
x[as.POSIXlt(x)$hour==8]
})
View(hi)
View(hi)
hi
cu_time_ex_opcl=as.POSIXct(sapply(time(cu_px_vo),function(x)
{
hour=as.POSIXlt(x)$hour
if(hour==8 || hour==20) nxd(x,1,time(cu_px_vo))
else if(hour==15) nxd(x,-1,time(cu_px_vo))
else x
}),origin=as.POSIXct( '1970-01-01 08:00:00'))
cu_px_vo_ex_opcl=xts(cu_px_vo,cu_time_ex_opcl)
cu_open_vo=Vo(to.period(cu_px_vo_ex_opcl,'minute')['T08:00:00/T09:00:59'])
View(cu_open_vo)
View(Vo(to.period(cu_px_vo_ex_opcl,'minute')['T20:00:00/T21:00:59']))
nrow(Vo(to.period(cu_px_vo_ex_opcl,'minute')['T20:00:00/T21:00:59']))
nrow(Vo(to.period(cu_px_vo_ex_opcl,'minute')['T08:00:00/T09:00:59']))
cu_open_vo=rbind(Vo(to.period(cu_px_vo_ex_opcl,'minute')['T08:00:00/T09:00:59']),
Vo(to.period(cu_px_vo_ex_opcl,'minute')['T20:00:00/T21:00:59']))
cu_open_vo
View(cu_open_vo)
head(cu_px_vo_ex_opcl['2018-02-14'],100)
head(cu_px_vo_ex_opcl['2018-04-04'],100)
head(cu_px_vo_ex_opcl['2018-04-04 22/'],100)
tail(cu_px_vo_ex_opcl['2018-04-04'],100)
plot(cu_open_vo)
plot(cu_open_vo)
chartSeries(to.period(cu_px_vo_ex_opcl,'hour'))
chartSeries(cu_open_vo,TA='addBBands(n=5)')
chartSeries(cu_open_vo,TA='addBBands(n=20)')
MACD(cu_open_vo)
View(MACD(cu_open_vo,5))
View(BBands(cu_open_vo,5))
bb_vo=BBands(cu_open_vo,5)
View(lag(bb_vo))
View((bb_vo))
(cu_open_vo-lag(bb_vo)$dn)/(lag(bb_vo)$up-lag(bb_vo)$dn)
bbpct_lag=(cu_open_vo-lag(bb_vo)$dn)/(lag(bb_vo)$up-lag(bb_vo)$dn)
bb_vo=cbind(bb_vo,bbpct_lag)
View(bb_vo)
chartSeries(bb_vo)
chartSeries(bb_vo$cu_px_vo_ex_opcl.Volume,TA='addTA(bb_vo$dn,on=1);addTA(bb_vo$up,on=1);addTA(bb_vo$mavg,on=1)')
chartSeries(cu_open_vo,TA='addTA(lag(bb_vo)$dn,on=1);addTA(lag(bb_vo)$up,on=1);addTA(lag(bb_vo)$mavg,on=1)')
chartSeries(cu_open_vo,TA='addTA(lag(bb_vo)$dn,on=1);addTA(lag(bb_vo)$up,on=1);addTA(lag(bb_vo)$mavg,on=1);addTA(bb_vo$cu_px_vo_ex_opcl.Volume)')
colnames(bb_vo)=c(colnames(bb_vo)[-length(colnames(bb_vo))],'pctB lag')
bb_vo$`pctB lag`>1
bb_vo$`pctB lag`[bb_vo$`pctB lag`>1]
chartSeries(to.period(cu_px_vo_ex_opcl,'minute'),subset = '2017-10-14/24')
chartSeries(to.period(cu_px_vo_ex_opcl,'minute'),subset = '2017-10-19/24')
View(cbind(to.period(cu_px_vo_ex_opcl,'minute'),bb_vo))
View(cbind(to.period(cu_px_vo_ex_opcl,'minute'),bb_vo$`pctB lag`))
data_chart=cbind(to.period(cu_px_vo_ex_opcl,'minute'),bb_vo$`pctB lag`)
na.fill(data_chart$pctB.lag,"extend")
data_chart$pctB.lag=na.fill(data_chart$pctB.lag,"extend")
View(data_chart)
data_chart=cbind(to.period(cu_px_vo_ex_opcl,'minute'),bb_vo$`pctB lag`)
head(na.fill(data_chart$pctB.lag,"extend"))
head((data_chart$pctB.lag,"extend"))
head((data_chart$pctB.lag\))
head((data_chart$pctB.lag))
data_chart$pctB.lag['2017-10-12 09:00:59']
data_chart$pctB.lag['2017-10-12 09']
data_chart$pctB.lag['2017-10-11 09']
data_chart$pctB.lag['2017-10-11 09:00']
data_chart$pctB.lag=na.fill(data_chart$pctB.lag,"extend")
chartSeries(OHLC(data_chart),TA='addSeries(data_chart$pctB.lag)')
chartSeries(OHLC(data_chart),TA='addTA(data_chart$pctB.lag)')
452/350
16/9
4/3
sapply(as.character(unique(date(time(to.period(cu_px_vo_ex_opcl,'minute'))))),
function(x)
{
chartSeries(Vo(to.period(cu_px_vo_ex_opcl,'minute')),
subset = x)
})
sapply(as.character(unique(date(time(to.period(cu_px_vo_ex_opcl,'minute'))))),
function(x)
{
chartSeries(Vo(to.period(cu_px_vo_ex_opcl[day_session],'minute')),
subset = x)
})
sapply(as.character(unique(date(time(to.period(cu_px_vo_ex_opcl,'minute'))))),
function(x)
{
tryCatch(
{
chartSeries(Vo(to.period(cu_px_vo_ex_opcl[day_session],'minute')),
subset = x)
},
error=
{
print(x)
}
)
})
day_session='T08/T15'
night_session='T16/T07'
sapply(as.character(unique(date(time(to.period(cu_px_vo_ex_opcl,'minute'))))),
function(x)
{
tryCatch(
{
chartSeries(Vo(to.period(cu_px_vo_ex_opcl[day_session],'minute')),
subset = x)
},
error=
{
print(x)
}
)
})
sapply(as.character(unique(date(time(to.period(cu_px_vo_ex_opcl,'minute'))))),
function(x)
{
tryCatch(
{
chartSeries(Vo(to.period(cu_px_vo_ex_opcl[day_session],'minute')),
subset = x)
},
error=function(e)
{
print(e)
print(x)
}
)
})
chart=sapply(as.character(unique(date(time(to.period(cu_px_vo_ex_opcl,'minute'))))),
function(x)
{
tryCatch(
{
chartSeries(Vo(to.period(cu_px_vo_ex_opcl[day_session],'minute')),
subset = x)
},
error=function(e)
{
print(e)
print(x)
}
)
})
chartSeries(to.period(cu_px_vo_ex_opcl,'minute'),subset = '2018-03-21')
chartSeries(to.period(cu_px_vo_ex_opcl,'minute'),subset = '2018-03-21 08/')
chartSeries(to.period(cu_px_vo_ex_opcl,'minute'),subset = '2018-03-21 08/16')
chartSeries(to.period(cu_px_vo_ex_opcl,'second',k=30),subset = '2018-03-21 08/16')
chartSeries(to.period(cu_px_vo_ex_opcl,'second',k=20),subset = '2018-03-21 08/16')
chartSeries(to.period(cu_px_vo_ex_opcl,'second',k=10),subset = '2018-03-21 08/16')
chartSeries(to.period(cu_px_vo_ex_opcl,'second',k=10),subset = '2018-03-21 08/16',addOBV())
chartSeries(to.period(cu_px_vo_ex_opcl,'second',k=10),subset = '2018-03-21 08/16',TA='addOBV()')
chartSeries(to.period(cu_px_vo_ex_opcl,'second',k=10),subset = '2018-03-21 08/16',TA='addVo();addOBV()')
chart=sapply(as.character(unique(date(time(to.period(cu_px_vo_ex_opcl,'minute'))))),
function(x)
{
tryCatch(
{
chartSeries(Vo(to.period(cu_px_vo_ex_opcl[night_session],'minute')),
subset = x)
},
error=function(e)
{
print(e)
print(x)
}
)
})
subset=as.character(unique(date(time(to.period(cu_px_vo_ex_opcl,'minute')))))
subset=as.character(unique(date(time(to.period(cu_px_vo_ex_opcl,'minute')))))
chart=mapply(function(x,y)
{
tryCatch(
{
chartSeries(Vo(to.period(cu_px_vo_ex_opcl[night_session],'minute')),
subset = paste(x,y,sep='/'))
},
error=function(e)
{
print(e)
print(x)
}
)
},
c('',subset),
c(subset,'')
)
as.character(unique(date(time(cu_px_vo_ex_opcl))))
csv=read.csv("IPO list 20170809-20180627")
setwd("C:/Users/Anthony/Desktop/ongoing/IPO")
csv=read.csv("IPO list 20170809-20180627.csv")
date=csv[,1]
csv=read.csv("IPO list 20170809-20180627.csv",header = F,as.is = NULL)
csv=read.csv("IPO list 20170809-20180627.csv",header = F,colClasses = 'character')
date=csv[,1]
code=csv[,2]
symbol=paste(csv[,2],' HK Equity', sep='')
date=as.POSIXct(paste(csv[,1],' 00:00:00',sep=''))
paste(csv[,1],' 00:00:00',sep='')
date
remove(code)
date+1
date+60*60*24
date+60*60*12
library(Rblpapi)
blpConnect(host = getOption("blpHost", "192.168.91.172"),port = getOption("blpPort", 10194L), default = TRUE)
tick_data=mapply(
{
getMultipleTicks(x,
eventType = "TRADE",
startTime = y,
endTime = y+2,
tz = Sys.getenv("TZ", unset = "Asia/Taipei"))
},
symbol,
date,
SIMPLIFY = F
)
tick_data=mapply(
function(x,y){
getMultipleTicks(x,
eventType = "TRADE",
startTime = y,
endTime = y+2,
tz = Sys.getenv("TZ", unset = "Asia/Taipei"))
},
symbol,
date,
SIMPLIFY = F
)
load("C:/Users/Anthony/Desktop/ongoing/cn comdty/bid and ask/tick data 2.RData")
load("C:/Users/Anthony/Desktop/ongoing/cn comdty/bid and ask/tick data 4.RData")
remove(ckc,cu_active)
load("C:/Users/Anthony/Desktop/ongoing/cn comdty/bid and ask/tick data 4.RData")
remove(ckc,cu,csv,dce,ioe,kee,pt,rbt,rt,tick_data,xii,zna,i)
remove(bbg_symbol)
remove(date)
remove(end.date)
remove(start.date)
save.image("C:/Users/Anthony/Desktop/ongoing/cn comdty/bid and ask/active.Rdata.RData")
load("C:/Users/Anthony/Desktop/ongoing/cn comdty/bid and ask/price_raw")
View(rt)
# install.packages("Rblpapi")
# install.packages("quantmod")
# install.packages("candlesticks", repos="http://R-Forge.R-project.org")
library(Rblpapi)
library(quantmod)
library(candlesticks)
library(tseries)
library(ggplot2)
library(reshape2)
library(foreach)
library(doParallel)
library(plyr)
library(lubridate)
rearrange=function(df)
{
q=df[,c("type","times","value","size")]
initial=list('time'= NA,
'TRADE'=data.frame('value'=NA, 'size'=NA),
'BID'=data.frame('value'=NA, 'size'=NA),
'ASK'=data.frame('value'=NA, 'size'=NA))
ls=NULL
temp=initial
time=head(q,1)$times
i=0
repeat(
{
if(nrow(q)==0 || c('TRADE'=1,'BID'=2,'ASK'=3)[head(q,1)$type]<=i || head(q,1)$times != time)
{
ls=append(ls,list(temp))
temp=initial
if(nrow(q)==0) return(ls)
}
i=c('TRADE'=1,'BID'=2,'ASK'=3)[head(q,1)$type]
time=head(q,1)$times
temp$time=time
temp[[head(q,1)$type]]=head(q,1)[,c('value','size')]
q=q[-1,]
}
)
}
clean=function(x,xts=F)
{
#extract trade to calculate rolling gap
x_trade=lapply(x,function(x){subset(x,type=='TRADE')})
#calculate the gap between one active contract to the next active contract
x_diff=cumsum(sapply(2:length(x_trade), function(x)
{
gap=head(x_trade[[x]]$value,1)-tail(x_trade[[x-1]]$value,1)
if(length(gap)==0) 0
else gap
}))
#extract trade time, size, type, value from different active contract, and then concatenate
x_times=sapply(x,function(x){x$times})
x_type=sapply(x,function(x){as.character(x$type)})
x_size=sapply(x,function(x){x$size})
x_value=sapply(x,function(x){x$value})
x_condcode=sapply(x,function(x){as.character(x$condcode)})
#add the gap to or subtract the gap from the first active contract
x_value_adj=append(x_value[1],lapply(2:length(x_value), function(x)
{
x_value[[x]]-x_diff[x-1]
}))
#format the data to xts
do.call(rbind,
mapply( function(type,value,size,times,condcode)
{
if(xts) xts(cbind(type,value,size,condcode),times)
else cbind.data.frame(times,type,value,size,condcode,stringsAsFactors=F)
},
x_type,
x_value_adj,
x_size,
x_times,
x_condcode,
SIMPLIFY = F))
}
dce_xts=clean(dce,T)
dce_df=clean(dce)
View(dce_df)
View(factor(dce_df$condcode))
View(levels(factor(dce_df$condcode)))
(levels(factor(dce_df$condcode)))
stopwatch=proc.time()
dce_rearrange=rearrange(head(dce_df[dce_df$condcode==''],10000))
proc.time()-stopwatch
stopwatch=proc.time()
dce_rearrange=rearrange(head(dce_df[dce_df$condcode=='',],10000))
proc.time()-stopwatch
13.23*4734352/10000
13.23*4734352/10000/60
stopwatch=proc.time()
dce_rearrange=rearrange(dce_df[dce_df$condcode=='',])
